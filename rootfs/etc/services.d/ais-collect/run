#!/usr/bin/with-contenv bash
#shellcheck shell=bash
#shellcheck disable=SC2016,SC2068,SC2076,SC2086,SC2015,SC2164,SC1090
# set -x
# AIS-Collect:
# read AIS data from a AIS-Catcher web service and
# create and maintain a CSV database with this data

# If no NOTIFY_INTERVAL is defined then set it to 24 hours

# redirect stderr to stdout so it's picked up in the docker logs
##exec 2>&1
# all errors will show a line number and the command used to produce the error
SCRIPT_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd)/$(basename "$0")"
trap 'echo -e "[$(date)][$APPNAME][ERROR] $SCRIPT_PATH in line $LINENO when executing: $BASH_COMMAND returned ${?}"' ERR

APPNAME="$(hostname)/ais-collect"
echo "[$(date)][$APPNAME] Started as an s6 service"
echo "[$(date)][$APPNAME] DEBUG=$DEBUG"

declare -A VESSELS
declare -a VESSEL_INDEX
declare -a KEY_INDEX
declare -A SHIPTYPE=([85]="#Tanker" [84]="#Tanker" [87]="#Tanker" [86]="#Tanker" [81]="#Tanker #Hazard cat A" [80]="#Tanker" [83]="#Tanker #Hazard cat C" [82]="#Tanker #Hazard cat B" [89]="#Tanker" [88]="#Tanker" [34]="#Diving" [35]="#Military #Mil" [36]="#Sailing" [37]="#Pleasure Craft" [30]="#Fishing" [31]="#Towing" [32]="#Towing (Large)" [33]="#Dredging" [38]="#Reserved" [39]="#Reserved" [58]="#Medical pransport" [9]="#Reserved" [59]="#Special vessel" [8]="#Reserved" [56]="#Local vessel" [7]="#Reserved" [57]="#Local vessel" [6]="#Reserved" [54]="#Anti_Pollution" [5]="#Reserved" [55]="#Law #Enforcement" [4]="#Reserved" [52]="#Tug" [3]="#Reserved" [53]="#Port_Tender" [2]="#Reserved" [50]="#Pilot vessel" [1]="#Reserved" [51]="#SAR" [0]="Not Available" [78]="#Cargo" [79]="#Cargo" [70]="#Cargo" [71]="#Cargo #Hazard cat A" [72]="#Cargo #Hazard cat B" [73]="#Cargo #Hazard cat C" [74]="#Cargo #Hazard cat D" [75]="#Cargo" [76]="#Cargo" [77]="#Cargo" [27]="#WIG #Reserved" [26]="#WIG #Reserved" [25]="#WIG #Reserved" [24]="#WIG #Hazard cat D" [23]="#WIG #Hazard cat B" [22]="#WIG #Hazard cat B" [21]="#WIG #Hazard cat A" [20]="#WIG (Wing in ground)" [29]="#WIG #Reserved" [28]="#WIG #Reserved" [41]="#HiSpeed" [40]="#HiSpeed" [43]="#HiSpeed" [42]="#HiSpeed" [45]="#HiSpeed" [44]="#HiSpeed" [47]="#HiSpeed" [46]="#HiSpeed" [49]="#HiSpeed" [48]="#HiSpeed" [92]="#Other" [93]="#Other" [90]="#Tanker" [91]="#Other" [96]="#Other" [97]="#Other" [94]="#Other" [95]="#Other" [98]="#Other" [99]="#Other" [18]="#Reserved" [19]="#Reserved" [12]="#Reserved" [13]="#Reserved" [10]="#Reserved" [11]="#Reserved" [16]="#Reserved" [17]="#Reserved" [14]="#Reserved" [15]="#Reserved" [69]="#Passenger vessel" [68]="#Passenger vessel" [63]="#Passenger vessel" [62]="#Passenger vessel" [61]="#Passenger vessel" [60]="#Passenger vessel" [67]="#Passenger vessel" [66]="#Passenger vessel" [65]="#Passenger vessel" [64]="#Passenger vessel" )


#Add notif_key style additional keys here, as needed for each notification service:
KEY_INDEX+=("mast_lat" "mast_lon" "mast_last")

[[ -z "${CHECK_INTERVAL}" ]] && CHECK_INTERVAL=30 || true
[[ -z "${VESSELDBFILE}" ]] && VESSELDBFILE="/data/vessel.db" || true
[[ -z "${VESSELDBLOCK}" ]] && VESSELDBLOCK="/run/vesseldb.lock" || true
[[ -z "${MIN_MSG_COUNT}" ]] && MIN_MSG_COUNT=5 || true
[[ -z "${MAX_MSG_AGE}" ]] && MAX_MSG_AGE=86400

touch "$VESSELDBFILE"
rm -f "$VESSELDBLOCK"

while true
do
    # If there's a lock file, wait until it's gone
    while [[ -f  $VESSELDBLOCK ]]
    do
        sleep 1
    done

    # Now lock the process for myself:
    touch "$VESSELDBLOCK"

    # First read the existing entries in from file
    if (( $(wc -l < "$VESSELDBFILE") > 0 ))
    then
        [[ -n "$DEBUG" ]] && echo reading VESSELS dict from file || true
        source "$VESSELDBFILE"
    fi

    # Now update it with the ones from the AIS_URL website.
    # The curl ... | jq ... command below creates a vertical list of key=value strings
    # from the JSON file in the AIS_URL. Each new ship starts with its mmsi as first key so we can use that as index.
    # The result is 3 arrays:
    # - VESSEL_INDEX contains a list of all MMSIs
    # - KEY_INDEX contains a list of all keys
    # - VESSELS[$mmsi:$key] contains values for mmsi=$mmsi and key=$key
    while read -r keyvalue
    do
        key="${keyvalue%%=*}"
        value="${keyvalue#*=}"
        if [[ "$key" == "mmsi" ]]
        then
            mmsi="$value"
            [[ -n "$mmsi" ]] && VESSEL_INDEX+=("$mmsi")
        fi
        [[ ! " ${KEY_INDEX[*]} " =~ " ${key} " ]] && KEY_INDEX+=("${key}")
        [[ -n "$mmsi" ]] && VESSELS["$mmsi:$key"]="$value"

    done <<< "$(curl -sL "$AIS_URL/ships_full.json" | jq -r ".ships[]|to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]")"

    # Clean out the ones that are too old or that don't have enough messages:
    for vessel in "${VESSEL_INDEX[@]}"
    do

    age="${VESSELS[${vessel}:last_signal]}"
    count="${VESSELS[${vessel}:count]}"

    [[ -z "$age" ]] && age=0
    [[ -z $count ]] && count=$MIN_MSG_COUNT

    if [[ ! $age =~ ^[0-9]+$ ]] \
    || (( age > MAX_MSG_AGE )) \
    || (( count < MIN_MSG_COUNT ))
    then
        [[ -n "$DEBUG" ]] && echo "removed ${vessel}: pattern ($age)=$([[ ! $age =~ ^[0-9]+$ ]] && echo -n true || echo -n false) >maxage ($age>$MAX_MSG_AGE)=$( (( age > MAX_MSG_AGE )) && echo -n true || echo -n false) MINMSGCNT ($count<$MIN_MSG_COUNT)=$( (( count < MIN_MSG_COUNT )) && echo true || echo false)"
        for key in "${KEY_INDEX[@]}"
        do
            unset "VESSELS[${vessel}:${key}]"
        done
        [[ "${VERBOSELOGS,,}" == "on" ]] && echo "[$(date)][$APPNAME] $vessel - removed from DB $( (( ${VESSELS["${vessel}:last_signal"]} > MAX_MSG_AGE )) && echo -n "- too old (${VESSELS["${vessel}:last_signal"]} > $MAX_MSG_AGE)" || true )$( (( ${VESSELS["${vessel}:count"]} < MIN_MSG_COUNT )) && echo -n "- too few messages (<$MIN_MSG_COUNT)" || true )" || true
    else
        [[ -n "$DEBUG" ]] && echo "kept ${vessel}"
    fi

    done

# Write back to file
# Write back to file
{
  declare -p KEY_INDEX
  declare -p VESSEL_INDEX
  declare -p VESSELS
  declare -p SHIPTYPE
} > "$VESSELDBFILE" 2>/dev/null

[[ -n "$DEBUG" ]] && echo wrote back to file
rm -f "$VESSELDBLOCK"

sleep $CHECK_INTERVAL

done
