#!/usr/bin/with-contenv bash
#shellcheck shell=bash
#shellcheck disable=SC2016,SC2068,SC2076,SC2086,SC2015,SC2164,SC1090

# AIS-Collect:
# read AIS data from a AIS-Catcher web service and
# create and maintain a CSV database with this data

# If no NOTIFY_INTERVAL is defined then set it to 24 hours

# redirect stderr to stdout so it's picked up in the docker logs
##exec 2>&1
# all errors will show a line number and the command used to produce the error
##SCRIPT_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd)/$(basename "$0")"
##trap 'echo -e "[$(date)][$APPNAME][ERROR] $SCRIPT_PATH in line $LINENO when executing: $BASH_COMMAND returned ${?}"' ERR

APPNAME="$(hostname)/ais-collect"
echo "[$(date)][$APPNAME] Started as an s6 service"


declare -A VESSELS
declare -a VESSEL_INDEX
declare -a KEY_INDEX

#Add notif_key style additional keys here, as needed for each notification service:
KEY_INDEX+=("mast_lat" "mast_lon" "mast_last")

[[ -z "${CHECK_INTERVAL}" ]] && CHECK_INTERVAL=30 || true
[[ -z "${VESSELDBFILE}" ]] && VESSELDBFILE="/run/vessel_db.csv" || true
[[ -z "${VESSELDBLOCK}" ]] && VESSELDBLOCK="/run/vessel_db.lock" || true
[[ -z "${MIN_MSG_COUNT}" ]] && MIN_MSG_COUNT=5 || true
[[ -z "${MAX_MSG_AGE}" ]] && MAX_MSG_AGE=86400

touch "$VESSELDBFILE"
rm -f "$VESSELDBLOCK"

while true
do
    # If there's a lock file, wait until it's gone
    while [[ -f  $VESSELDBLOCK ]]
    do
        sleep 1
    done

    # Now lock the process for myself:
    touch "$VESSELDBLOCK"

    # First read the existing entries in from file
    if (( $(wc -l < "$VESSELDBFILE") > 0 ))
    then
        [[ -n "$DEBUG" ]] && echo reading VESSELS dict from file || true
        source "$VESSELDBFILE"
    fi

    # Now update it with the ones from the AIS_URL website.
    # The curl ... | jq ... command below creates a vertical list of key=value strings
    # from the JSON file in the AIS_URL. Each new ship starts with its mmsi as first key so we can use that as index.
    # The result is 3 arrays:
    # - VESSEL_INDEX contains a list of all MMSIs
    # - KEY_INDEX contains a list of all keys
    # - VESSELS[$mmsi:$key] contains values for mmsi=$mmsi and key=$key
    while read -r keyvalue
    do
        key="${keyvalue%%=*}"
        value="${keyvalue#*=}"
        if [[ "$key" == "mmsi" ]]
        then
            mmsi="$value"
            VESSEL_INDEX+=("$mmsi")
        fi
        [[ ! " ${KEY_INDEX[*]} " =~ " ${key} " ]] && KEY_INDEX+=("${key}")
        [[ -n "$mmsi" ]] && VESSELS["$mmsi:$key"]="$value"

    done <<< "$(curl -sL "$AIS_URL" | jq -r ".ships[]|to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]")"

    # Clean out the ones that are too old or that don't have enough messages:
    for vessel in "${VESSEL_INDEX[@]}"
    do
    if [[ ! "${VESSELS[${vessel}:last_signal]}" =~ "^[0-9]+$" ]] \
    || (( ${VESSELS[${vessel}:last_signal]} > MAX_MSG_AGE )) \
    || (( ${VESSELS[${vessel}:count]} < MIN_MSG_COUNT ))
    then
        [[ -n "$DEBUG" ]] && echo "removed ${vessel}: pattern=$([[ ! "${VESSELS[${vessel}:last_signal]}" =~ "^[0-9]+$" ]] && echo -n true || echo -n false) >maxage=$( (( ${VESSELS[${vessel}:last_signal]} > MAX_MSG_AGE )) && echo -n true || echo -n false) <MINMSGCNT=$( (( ${VESSELS[${vessel}:count]} < MIN_MSG_COUNT )) && echo true || echo false)"
        for key in "${KEY_INDEX[@]}"
        do
            unset "VESSELS[${vessel}:${key}]"
        done
        [[ "${VERBOSELOGS,,}" == "on" ]] && echo "[$(date)][$APPNAME] $vessel - removed from DB $( (( ${VESSELS["${vessel}:last_signal"]} > MAX_MSG_AGE )) && echo -n "- too old (${VESSELS["${vessel}:last_signal"]} > $MAX_MSG_AGE)" || true )$( (( ${VESSELS["${vessel}:count"]} < MIN_MSG_COUNT )) && echo -n "- too few messages (<$MIN_MSG_COUNT)" || true )" || true
    else
        [[ -n "$DEBUG" ]] && echo "kept ${vessel}: pattern=$([[ ! "${VESSELS[${vessel}:last_signal]}" =~ "^[0-9]+$" ]] && echo -n true || echo -n false) >maxage=$( (( ${VESSELS[${vessel}:last_signal]} > MAX_MSG_AGE )) && echo -n true || echo -n false) <MINMSGCNT=$( (( ${VESSELS[${vessel}:count]} < MIN_MSG_COUNT )) && echo true || echo false)"
    fi

done

# Write back to file
declare -p KEY_INDEX > "$VESSELDBFILE" 2>/dev/null
declare -p VESSEL_INDEX >> "$VESSELDBFILE" 2>/dev/null
declare -p VESSELS >> "$VESSELDBFILE" 2>/dev/null

[[ -n "$DEBUG" ]] && echo wrote back to file
rm -f "$VESSELDBLOCK"

sleep $CHECK_INTERVAL

done
