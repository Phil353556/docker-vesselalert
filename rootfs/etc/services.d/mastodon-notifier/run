#!/usr/bin/with-contenv bash
#shellcheck shell=bash
#shellcheck disable=SC2015,SC1090,SC2164,SC2001,SC1091


# Mastodon-Notifier
# Send notification to Mastodon
#---------------------------------------------------------------------------------------------
# Copyright (C) 2022-2023, Ramon F. Kolb (kx1t)
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.
#---------------------------------------------------------------------------------------------

# redirect stderr to stdout so it's picked up in the docker logs
exec 2>&1
# all errors will show a line number and the command used to produce the error
SCRIPT_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd)/$(basename "$0")"
trap 'echo -e "[$(date)][$APPNAME][ERROR] $SCRIPT_PATH in line $LINENO when executing: $BASH_COMMAND returned ${?}"' ERR

APPNAME="$(hostname)/mastodon-notifier"
echo "[$(date)][$APPNAME] Started as an s6 service"

renice -n 10 -p $$ >/dev/null 2>&1

[[ -z "${CHECK_INTERVAL}" ]] && CHECK_INTERVAL=30 || true
[[ -z "${VESSELDBFILE}" ]] && VESSELDBFILE="/data/vessel.db" || true
[[ -z "${VESSELDBLOCK}" ]] && VESSELDBLOCK="/run/vesseldb.lock" || true
[[ -z "${MASTODON_FORMAT}" ]] && MASTODON_FORMAT=("mast" "last_notif" "lat" "lon")
MASTODON_SERVER="${MASTODON_SERVER,,}"
[[ -z "${MASTODON_SERVER}" ]] && MASTODON_SERVER="airwaves.social"
[[ "${MASTODON_SERVER:0:7}" == "http://" ]] && MASTODON_SERVER="${MASTODON_SERVER:7}" || true
[[ "${MASTODON_SERVER:0:8}" == "https://" ]] && MASTODON_SERVER="${MASTODON_SERVER:8}" || true
MASTODON_SERVER="https://${MASTODON_SERVER}"
notification_count=0
[[ -z "$MASTODON_POST_VISIBILITY" ]] && MASTODON_POST_VISIBILITY=public
# [[ -n "$DEBUG" ]] && MASTODON_POST_VISIBILITY="private"
IMAGECACHE="${VESSELDBFILE%/*}/imagecache"
[[ -z "${MIN_MSG_COUNT}" ]] && MIN_MSG_COUNT=5 || true
if [[ -z "$MASTODON_MIN_DIST" ]] || [[ "$MASTODON_MIN_DIST" == "0" ]]
then
    unset MASTODON_MIN_DIST
fi

touch "$VESSELDBFILE"
rm -f "$VESSELDBLOCK"

mkdir -p "${IMAGECACHE}/screenshots"

# add some random time to the check interval (0-5 secs)
CHECK_INTERVAL="$(nice -n 20 bc -l <<<"scale=0; x=$RANDOM % 50; scale=1; $CHECK_INTERVAL + x/10")"

# Wait a cycle -- this gives AIS-Collect the chance to do at least an initial run:
sleep "$CHECK_INTERVAL"

# ---------------------------------------------------------------------------------------

while true
do

    # 3 main arrays:
    # - VESSELDICT is an associative array that contains all the vessels, indexed by their MMSI.
    #   So: ${!VESSELDICT[@]} contains the list of MMSIs, and ${VESSELDICT[$mmsi]}
    #   contains a comma-separated list of parameter values.
    #
    # - vesselinfo is an associative array that contains the information of a single vessel from
    #   the VESSELDICT array. The ${headers[@]} array contains the keys for each of these values.
    #
    # - mast_status is extracted from the right-most "notif_x" field from vesselinfo that starts with "mast="
    #   This array contains information about previous notifications to Mastodon for this MMSI
    #   The keys to this array are defined in MASTODON_FORMAT

    # If there's a lock file, wait until it's gone\
    while [[ -f  $VESSELDBLOCK ]]
    do
        sleep 1
    done

    # Now lock the process for myself:
    touch "$VESSELDBLOCK"

    # First read the existing entries in from file
    if (( $(wc -l < "$VESSELDBFILE") > 0 ))
    then
        [[ -n "$DEBUG" ]] && echo reading shipdict from file || true
        source "$VESSELDBFILE"
    fi

    # Iterate through the ships:
    for vessel in "${VESSEL_INDEX[@]}"
    do

        [[ -z "${VESSELS[${vessel}:mmsi]}" ]] && continue || true    # capture empty mmsi and skip
        # now we have the mastodon notification status of the vessel in mast_status. Let's check if we need to notify:

        # based on timing:
        if     [[ -n "$MASTODON_NOTIFY_EVERY" ]] \
        && [[ -n "${VESSELS[${vessel}:mast:last]}" ]] \
        && (( $(date +%s) <= ${VESSELS[${vessel}:mast:last]} + MASTODON_NOTIFY_EVERY ))
        then
            [[ -n "$DEBUG" ]] && echo "${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) skipped notify based on timing. (Last notification was $(( $(date +%s) - ${VESSELS[${vessel}:mast:last]} )) secs ago, minimum interval is $MASTODON_NOTIFY_EVERY secs )"
            notify_timing="false"
        else
            [[ -n "$DEBUG" ]] && echo "${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) ready to notify based on timing (or MASTODON_NOTIFY_EVERY is off). (Last notification was $( [[ -n "${VESSELS[${vessel}:mast:last]}" ]] && echo "$(( $(date +%s) - ${VESSELS[${vessel}:mast:last]} )) secs ago" || echo "never"), minimum interval is $MASTODON_NOTIFY_EVERY secs )"
            notify_timing="true"
        fi
        # Never notify if last observation was more than 10 mins ago:
        if [[ -n "${VESSELS[${vessel}:last_signal]}" ]] \
	    && (( ${VESSELS[${vessel}:last_signal]} > 600 ))
        then
	    [[ -n "$DEBUG" ]] && echo "${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) skipped notify based on timing. (Last time heard was ${VESSELS[${vessel}:last_signal]} > 600 secs )"
            notify_timing="false"
       	fi

        # based on distance from last notification:
        #shellcheck disable=SC2086
        if     [[ -n "${MASTODON_MIN_DIST}" ]] \
        && [[ -n "${VESSELS[${vessel}:lat]}" ]] && [[ -n "${VESSELS[${vessel}:lon]}" ]] \
        && [[ "${VESSELS[${vessel}:lat]}" != "null" ]] && [[ "${VESSELS[${vessel}:lon]}" != "null" ]] \
        && [[ -n "${VESSELS[${vessel}:mast:lat]}" ]] && [[ -n "${VESSELS[${vessel}:mast:lon]}" ]] \
        && [[ "$(nice -n 20 bc -l <<<"scale=2; $(nice -n 20 distance ${VESSELS[${vessel}:mast:lat]} ${VESSELS[${vessel}:mast:lon]} ${VESSELS[${vessel}:lat]} ${VESSELS[${vessel}:lon]}) <= $MASTODON_MIN_DIST")" == "1" ]]
        then
            notify_distance="false"
            [[ -n "$DEBUG" ]] && echo "${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) traveled distance too short - do not notify (measured $(nice -n 20 distance "${VESSELS[${vessel}:mast:lat]}" "${VESSELS[${vessel}:mast:lon]}" "${VESSELS[${vessel}:lat]}" "${VESSELS[${vessel}:lon]}") < allowed $MASTODON_MIN_DIST )"
        elif [[ -n "${MASTODON_MIN_DIST}" ]] \
        && [[ -n "${VESSELS[${vessel}:lat]}" ]] && [[ -n "${VESSELS[${vessel}:lon]}" ]] \
        && [[ "${VESSELS[${vessel}:lat]}" != "null" ]] && [[ "${VESSELS[${vessel}:lon]}" != "null" ]] \
        && [[ -n "${VESSELS[${vessel}:mast:lat]}" ]] && [[ -n "${VESSELS[${vessel}:mast:lon]}" ]]
        then
            notify_distance="true"
            [[ -n "$DEBUG" ]] && [[ -n "${MASTODON_MIN_DIST}" ]] && echo "${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) ready to notify by distance: traveled distance far enough (measured $(nice -n 20 distance "${VESSELS[${vessel}:mast:lat]}" "${VESSELS[${vessel}:mast:lon]}" "${VESSELS[${vessel}:lat]}" "${VESSELS[${vessel}:lon]}") >= allowed $MASTODON_MIN_DIST )"
        else
            notify_distance="false"
            [[ -n "$DEBUG" ]] && [[ -z "${MASTODON_MIN_DIST}" ]] && echo "${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) no need to notify by distance: MASTODON_MIN_DIST not defined"
        fi

        # dont notify if it matches the Skip Filter
        if     [[ -n "${MASTODON_SKIP_FILTER}" ]] \
        && [[ ${VESSELS[${vessel}:mmsi]} =~ ${MASTODON_SKIP_FILTER} ]]
        then
            notify_filter="false"
            [[ -n "$DEBUG" ]] && echo "${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) skipped because of mmsi filter match (${MASTODON_SKIP_FILTER})"
        elif [[ -n "${MASTODON_SKIP_FILTER}" ]]
        then
            notify_filter="true"
            [[ -n "$DEBUG" ]] && echo "${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) ready to notify: MASTODON_SKIP_FILTER defined but no mmsi skip filter match"
        else
            notify_filter="true"
            [[ -n "$DEBUG" ]] && echo "${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) no need to notify by filter: no MASTODON_SKIP_FILTER defined"
        fi

        # check once more the min_msg_count. Too few messages means the screenshot won't be complete and it'd be better to wait
        if [[ ! ${VESSELS[${vessel}:count]}  =~ ^[0-9]+$ ]] || (( ${VESSELS[${vessel}:count]} < MIN_MSG_COUNT ))
        then
            notify_count="false"
            [[ -n "$DEBUG" ]] && echo "${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) Skipped notification: MIN_MSG_COUNT of $MIN_MSG_COUNT not yet exceeded (count=${VESSELS[${vessel}:count]})"
        else
            notify_count="true"
            [[ -n "$DEBUG" ]] && echo "${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) ready to notify: MIN_MSG_COUNT of $MIN_MSG_COUNT exceeded (count=${VESSELS[${vessel}:count]})"

        fi

        # Notification logic here for clarity:
        unset notify_now
        [[ "$notify_timing" == "true" ]] && notify_now="true"   # notify when timing is right or when the timing is undefined
        [[ "$notify_distance" == "true" ]] && notify_now="true" # notify when the distance traveled is far enough
        [[ "$notify_filter" == "false" ]] && unset notify_now   # stop and overrule notification if the MMSI filter has a match
        [[ "$notify_count" == "false" ]] && unset notify_now	# overrule notification because there are too few messages

        [[ -n "$DEBUG" ]] && [[ -n "$notify_now" ]] && echo "${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) Final result: Will do a Mastodon notification (timing=$notify_timing; distance=$notify_distance; filter=$notify_filter; count=$notify_count)"
        [[ -n "$DEBUG" ]] && [[ -z "$notify_now" ]] && echo "${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) Final result: Will not do a Mastodon notification (timing=$notify_timing; distance=$notify_distance; filter=$notify_filter; count=$notify_count)"

        if [[ -n "$notify_now" ]]
        then
            # we need to notify
	    # First do some clean up
            [[ -n "${VESSELS[${vessel}:shipname]}" ]] && VESSELS[${vessel}:shipname]="$(sed -e ':a;s/^\(\([^"]*[,.]\?\|"[^",.]*"[,.]\?\)*"[^",.]*\)[,.]/\1 /;ta' -e 's|["'\''.]||g' -e 's|[^A-Z0-9,\.\-]\+|_|g' -e 's|_,|,|g' <<< "${VESSELS[$vessel:shipname]}")"
            [[ -n "${VESSELS[${vessel}:destination]}" ]] && VESSELS[${vessel}:destination]="$(sed -e ':a;s/^\(\([^"]*[,.]\?\|"[^",.]*"[,.]\?\)*"[^",.]*\)[,.]/\1 /;ta' -e 's|["'\''.]||g' -e 's|[^A-Z0-9,\.\-]\+|_|g' -e 's|_,|,|g' <<< "${VESSELS[$vessel:destination]}")"

            # Create notification string
            # These are the valid fields:
            links=""
            [[ -n "$MASTODON_LINK_SHIPXPLORER" ]] && links+="https://www.shipxplorer.com/data/vessels/IMO-MMSI-${VESSELS[${vessel}:mmsi]}\n" || true
            [[ -n "$MASTODON_LINK_MARINETRAFFIC" ]] && links+="https://www.marinetraffic.com/en/ais/details/ships/${VESSELS[${vessel}:mmsi]}\n" || true
            [[ -n "$MASTODON_LINK_VESSELFINDER" ]] && links+="https://www.vesselfinder.com/vessels/details/${VESSELS[${vessel}:mmsi]}\n" || true

            mast_str="#VesselAlert #Ship #Vessel #AIS"
            [[ -z "${VESSELS[${vessel}:mast:last]}" ]] && mast_str+=" #NEW #FIRST Observation"
            [[ "$notify_distance" == "true" ]] && mast_str+=" #OnTheMove"
            mast_str+="\n"
            [[ -n "${VESSELS[${vessel}:shipname]}" ]] && mast_str+="Name: #${VESSELS[${vessel}:shipname]} "
            [[ -n "${VESSELS[${vessel}:mmsi]}" ]] && mast_str+="#MMSI: #${VESSELS[${vessel}:mmsi]}\n"
            [[ -n "${VESSELS[${vessel}:callsign]}" ]] && mast_str+="Callsign: #${VESSELS[${vessel}:callsign]} "
            [[ -n "${VESSELS[${vessel}:shiptype]}" ]] && [[ -n "${SHIPTYPE[${VESSELS[${vessel}:shiptype]}]}" ]] && mast_str+="Type: ${SHIPTYPE[${VESSELS[${vessel}:shiptype]}]}"
            mast_str+="\n"

            [[ -n "${VESSELS[${vessel}:country]}" ]] && mast_str+="#Flag: #${COUNTRY[${VESSELS[${vessel}:country]}]} "
            mast_str+="Msgs recvd: ${VESSELS[${vessel}:count]}\n"
            mast_str+="Seen on: $(date -d @$(( $(date +%s) - ${VESSELS[${vessel}:last_signal]} )) +"%d-%b-%Y %H:%M:%S %Z")\n"

            [[ -n "${VESSELS[${vessel}:status]}" ]] && [[ -n "${SHIPSTATUS[${VESSELS[${vessel}:status]}]}" ]] && mast_str+="Status: ${SHIPSTATUS[${VESSELS[${vessel}:status]}]}\n"
            [[ -n "${VESSELS[${vessel}:speed]}" ]] && [[ "${VESSELS[${vessel}:speed]}" != "0" ]] && [[ "${VESSELS[${vessel}:speed]}" != "null" ]] && mast_str+="Speed: $(printf "%.1f" "${VESSELS[${vessel}:speed]}") kts "
            [[ -n "${VESSELS[${vessel}:heading]}" ]] && [[ "${VESSELS[${vessel}:heading]}" != "0" ]] && [[ "${VESSELS[${vessel}:heading]}" != "null" ]]&& mast_str+="Heading: ${VESSELS[${vessel}:heading]} deg "
            [[ -n "${VESSELS[${vessel}:destination]}" ]] && mast_str+="Destination: ${VESSELS[${vessel}:destination]}\n"
            mast_str+="\n"

            mast_str+="Signal #RSSI: $(printf "%.1f dBFS" "${VESSELS[${vessel}:level]}")\n"
            [[ -n "${links}" ]] && mast_str+="${links}\n"
            [[ -n "${MASTODON_MAPURL}" ]] && [[ "${MASTODON_MAPURL:0:4}" != "http" ]] && mast_str+="\nVessel location: ${AIS_URL}?mmsi=${VESSELS[${vessel}:mmsi]}"
            [[ -n "${MASTODON_MAPURL}" ]] && [[ "${MASTODON_MAPURL:0:4}" == "http" ]] && mast_str+="\nVessel location: ${MASTODON_MAPURL_URL}?mmsi=${VESSELS[${vessel}:mmsi]}"

            [[ -n "$MASTODON_CUSTOM_FIELD" ]] && mast_str+="\n$MASTODON_CUSTOM_FIELD"

            mast_str="$(sed -e 's|\\n|\n|g' <<< "$mast_str")"

            # Now we can finally send this to Mastodon
            # First let's get an image if it exists from MarineVessel:

            image_link="https://photos.marinetraffic.com/ais/showphoto.aspx?mmsi=${VESSELS[${vessel}:mmsi]}"
            media_id=""

            # Try to get an image if there isn't already one:
            if [[ ! -f "$IMAGECACHE/${VESSELS[${vessel}:mmsi]}.jpg" ]]
            then
                if ! curl -sL -A "Mozilla/5.0 (X11; Linux x86_64; rv:97.0) Gecko/20100101 Firefox/97.0" "$image_link" -o  "$IMAGECACHE/${VESSELS[${vessel}:mmsi]}.jpg"
                then
                    rm -f "$IMAGECACHE/${VESSELS[${vessel}:mmsi]}.jpg"
                fi
            fi
            # If the file starts with <!DOCTYPE html>, we know it was an error message and we can erase it:
            if grep '<!DOCTYPE html>' < <(dd bs=1 count=15 if="$IMAGECACHE/${VESSELS[${vessel}:mmsi]}.jpg" 2>/dev/null) >/dev/null 2>&1
            then
                rm -f "$IMAGECACHE/${VESSELS[${vessel}:mmsi]}.jpg"
            fi

            # If the image still exists, then upload it to Mastodon:
            if [[ -f "$IMAGECACHE/${VESSELS[${vessel}:mmsi]}.jpg" ]]
            then
                response="$(curl -s -H "Authorization: Bearer ${MASTODON_ACCESS_TOKEN}" -H "Content-Type: multipart/form-data" -X POST "${MASTODON_SERVER}/api/v1/media" --form file="@$IMAGECACHE/${VESSELS[${vessel}:mmsi]}.jpg")"
                [[ "$(jq '.id' <<< "$response" | xargs)" != "null" ]] && mast_id="$(jq '.id' <<< "$response" | xargs)" || mast_id=""
                [[ -n "${mast_id}" ]] && media_id="-F media_ids[]=${mast_id}"
                echo "[$(date)][$APPNAME] image for ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) uploaded to Mastodon"
            else
                echo "[$(date)][$APPNAME] no image available for ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]})"
            fi

            if [[ -n "$SCREENSHOT_URL" ]]
            then
                # get a screenshot
                rm -f "/${IMAGECACHE}/screenshots/${VESSELS[${vessel}:mmsi]}.jpg"
                if curl -sSL "$SCREENSHOT_URL/snap/${VESSELS[${vessel}:mmsi]}" -o "${IMAGECACHE}/screenshots/${VESSELS[${vessel}:mmsi]}.jpg"
                then
                    response="$(curl -s -H "Authorization: Bearer ${MASTODON_ACCESS_TOKEN}" -H "Content-Type: multipart/form-data" -X POST "${MASTODON_SERVER}/api/v1/media" --form file="@/${IMAGECACHE}/screenshots/${VESSELS[${vessel}:mmsi]}.jpg")"
                    [[ "$(jq '.id' <<< "$response" | xargs)" != "null" ]] && mast_id="$(jq '.id' <<< "$response" | xargs)" || mast_id=""
                    [[ -n "${mast_id}" ]] && media_id+=" -F media_ids[]=${mast_id}"
                    echo "[$(date)][$APPNAME] screenshot for ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) uploaded to Mastodon with ID ${mast_id}"
                else
                    echo "[$(date)][$APPNAME] Failed to get screenshot for ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) upload to Mastodon"
                fi
            else
                echo "[$(date)][$APPNAME] no screenshot available for ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]})"
            fi

            # Now send a Toot:
            #shellcheck disable=SC2086
            response="$(curl -H "Authorization: Bearer ${MASTODON_ACCESS_TOKEN}" -s "${MASTODON_SERVER}/api/v1/statuses" -X POST $media_id -F "status=${mast_str}" -F "language=eng" -F "visibility=${MASTODON_POST_VISIBILITY}")"
            # check if there was an error
            if [[ "$(jq '.error' <<< "$response"|xargs)" == "null" ]]
            then
                echo -n "[$(date)][$APPNAME] Mastodon post for ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}) generated successfully. Mastodon post available at: $(jq '.url' <<< "$response"|xargs). "
                [[ -z "${VESSELS[${vessel}:mast:last]}" ]] && echo -n "#NEW "
                [[ "$notify_timing" == "true" ]] && [[ -n "${VESSELS[${vessel}:mast:last]}" ]] && echo -n "#OLD "
                [[ "$notify_distance" == "true" ]] && echo -n "#ONTHEMOVE"
                echo ""
            else
                echo "[$(date)][$APPNAME] Mastodon post error for ${VESSELS[${vessel}:mmsi]} (${VESSELS[${vessel}:shipname]}). Mastodon returned this error: $(jq '.error' <<< "$response"|xargs)"
            fi

            # Update the Assoc Array with the latest values:
            # update mast_status values:
            VESSELS[${vessel}:mast:lat]="${VESSELS[${vessel}:lat]}"
            VESSELS[${vessel}:mast:lon]="${VESSELS[${vessel}:lon]}"
            VESSELS[${vessel}:mast:last]="$(date +%s)"

            [[ -n "$DEBUG" ]] && echo "updated VESSELS[$mmsi]"
            # Increment notification count
            (( notification_count++ )) || true

            if [[ -n "$MASTODON_THROTTLE" ]] && [[ "$(nice -n 20 bc <<< "$notification_count%10")" == "0" ]]
            then
                # we need to throttle - let's wait 15 seconds
                [[ -n "$DEBUG" ]] && echo "Notification Count is $notification_count; throttling for 15 seconds"
                sleep 15
            fi
        fi
    done

    [[ -n "$DEBUG" ]] && echo "Notification count: $notification_count"

    # Write arrays back to the file if it was changed:
    if (( notification_count > 0 ))
    then
        # Write back to file
        source /usr/share/vesselalert/save_databases
        notification_count=0
        fi

        # Remove file block:
        rm -f "$VESSELDBLOCK"

        # Sleep a bit
        sleep "$CHECK_INTERVAL"

    done
