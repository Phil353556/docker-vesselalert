#!/usr/bin/with-contenv bash
#shellcheck shell=bash
#shellcheck disable=SC2016,SC2068,SC2076,SC2086,SC2015,SC2164

# Mastodon-Notifier
# Send notification to Mastoron
# create and maintain a CSV database with this data

# redirect stderr to stdout so it's picked up in the docker logs
exec 2>&1
# all errors will show a line number and the command used to produce the error
SCRIPT_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd)/$(basename "$0")"
trap 'echo -e "[$(date)][$APPNAME][ERROR] $SCRIPT_PATH in line $LINENO when executing: $BASH_COMMAND returned ${?}"' ERR

APPNAME="$(hostname)/mastodon-notifier"
echo "[$(date)][$APPNAME] Started as an s6 service"

[[ -z "$CHECK_INTERVAL" ]] && CHECK_INTERVAL=30 || true
[[ -z "$SHIPDBFILE" ]] && SHIPDBFILE="/run/ship_db.csv" || true
[[ -z "$SHIPDBLOCK" ]] && SHIPDBLOCK="/run/ship_db.lock" || true

# This is the format of the SHIPDICT associative array records:
# [mmsi, country, lat, lon, rssi, count, ppm, shipname, time_last_heard, notification_attributes_1, notification_attributes_2, ...]
#   0       1      2    3     4     5     6       7           8                    9    <-- field index for BASH
#   1       2      3    4     5     6     7       8           9                   10    <-- field index for AWK

# Define some functions to calculate distance between coordinates using Haversine:
deg2rad () {
    bc -l <<< "$1 * 0.0174532925"
}

rad2deg () {
    bc -l <<< "$1 * 57.2957795"
}

acos () {
    pi="3.141592653589793"
    bc -l <<< "$pi / 2 - a($1 / sqrt(1 - $1 * $1))"
}

distance () {
    lat_1="$1"
    lon_1="$2"
    lat_2="$3"
    lon_2="$4"
    delta_lat="$(bc <<<"$lat_2 - $lat_1")"
    delta_lon="$(bc <<<"$lon_2 - $lon_1")"
    lat_1="$(deg2rad $lat_1)"
    lon_1="$(deg2rad $lon_1)"
    lat_2="$(deg2rad $lat_2)"
    lon_2="$(deg2rad $lon_2)"
    delta_lat="$(deg2rad $delta_lat)"
    delta_lon="$(deg2rad $delta_lon)"
    distance="$(bc -l <<< "s($lat_1) * s($lat_2) + c($lat_1) * c($lat_2) * c($delta_lon)")"
    distance="$(acos $distance)"
    distance="$(rad2deg $distance)"
    distance="$(bc -l <<< "$distance * 60")"
    distance="$(bc <<<"scale=4; $distance / 1")"
    echo $distance
}

while true
do
    declare -a SHIPDICT=()

    # If there's a lock file, wait until it's gone
    while [[ -f  $SHIPDBLOCK ]]
    do
        sleep 1
    done
    # Now lock the process for myself:
    touch "$SHIPDBLOCK"

    # First read the existing entries in from file
    if (( $(wc -l < "$SHIPDBFILE") > 0 ))
    then
        while IFS="" read -r line
        do
            read -d , -r mmsi <<< "$line" || continue
            if [[ -n "$mmsi" ]]
            then
                SHIPDICT[${mmsi}]="$line"
            else
                echo "[$(date)][$APPNAME] Bad entry in $SHIPDBFILE: \"$line\""
            fi
        done < "$SHIPDBFILE"
    fi

    # Iterate through the ships:
    for ship in ${SHIPDICT[@]}
    do
        readarray -td, shipdata <<< "$ship"
        # retrieve the last notification if known
        last_notif=""
        if (( ${#shipdata[@]} > 9 ))
        then
            for ((i=9; i<${#shipdata[@]}; i++))
            do
                if [[ "${shipdata[$i]:0:9}" == "mastodon=" ]]
                then
                    last_notif="${shipdata[$i]:9}"
                    i="${#shipdata[@]}"
                fi
            done
        fi
        # interpret the last noficition:
        # secs_since_epoch|last_notified_lat|last_notified_lon
        if [[ -n "$last_notif" ]]
        then
            secs_since_epoch="$(awk -F '|' '{print $1}' <<< "$last_notif")"
            last_notified_lat="$(awk -F '|' '{print $2}' <<< "$last_notif")"
            last_notified_lon="$(awk -F '|' '{print $3}' <<< "$last_notif")"
        else
            secs_since_epoch=0
            last_notified_lat=-1000
            last_notified_lon=-1000
        fi

        # check if we need to notify
        if (( $(date +%s) - secs_since_epoch > MASTODON_NOTIFY_EVERY )) || \
           (( last_notified_lat + last_notified_lon == -2000 )) || \
           (( $(distance $last_notified_lat $last_notified_lon ${shipdata[2]} ${shipdata[3]}) > MASTODON_MIN_DIST ))
        then
            # we need to notify
            # First create notification string:
            links=""
            [[ -n "$MAST_LINK_SHIPXPLORER" ]] && links+=" https://www.shipxplorer.com/data/vessels/IMO-MMSI-${shipdata[0]}" || true
            [[ -n "$MAST_LINK_MARINETRAFFIC" ]] && links+=" https://www.marinetraffic.com/en/ais/details/ships/${shipdata[0]}" || true


            printf -v mast_str -- \
            "#AISAlert #Ship #Vessel #VesselAlert
             #Name: %s #MMSI: %s
             #Flag: %s
             Last seen: %s
             Msgs recvd: %s
             Signal (RSSI): %s dbFS












    done

    # Now update it with the ones from the AIS_URL website
    while IFS="" read -r line
    do
        read -d , -r mmsi <<< "$line" || continue
        if [[ -n "$mmsi" ]]
        then
            SHIPDICT[${mmsi}]="$line,$(date +%s),"
        else
            echo "[$(date)][$APPNAME] Bad entry in $AIS_URL/ships_full.json: \"$line\""
        fi
    done <<< "$(curl -sSL $AIS_URL/ships_full.json | jq -r '.ships[] | [.mmsi, .country, .lat, .lon, .level, .count, .ppm, .shipname] | @csv')"

    # Write back to file
    printf "%s\n" ${SHIPDICT[@]} > "$SHIPDBFILE"
    rm -f "$SHIPDBLOCK"

    sleep check_interval

done
